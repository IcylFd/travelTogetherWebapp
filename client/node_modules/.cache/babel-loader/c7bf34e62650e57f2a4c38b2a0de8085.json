{"ast":null,"code":"import 'whatwg-fetch';\nimport 'fetch-detector';\nimport 'fetch-ie8';\nimport { queryParams } from './utils';\n\nclass Fetch {\n  _safeMap(arr, iterator) {\n    if (Array.isArray(arr)) {\n      return arr.map(iterator);\n    } else if (typeof arr === 'object') {\n      return Object.keys(arr).map(key => iterator(arr[key], key));\n    }\n\n    return [];\n  }\n\n  _parseJSON(response) {\n    if (response.headers.get('Content-Type').indexOf('text/plain') !== -1) {\n      return response.text();\n    }\n\n    return response.json();\n  }\n\n  _checkHttpStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    const error = new Error(`调取服务发生错误:错误码:${response.status},错误信息:${response.statusText}`);\n    throw error;\n  }\n\n  _handleError(response) {\n    let resData = response;\n\n    if (Object.prototype.toString.call(resData) === '[object String]') {\n      resData = JSON.parse(response);\n    }\n\n    if (+resData.errno === 10022) {\n      // sso失败的错误码，重新登录\n      window.location.reload();\n    } else if (+resData.errno !== 0 && resData.code !== 0) {\n      // 接口异常错误\n      throw resData.errmsg || resData.message;\n    }\n\n    return resData.data;\n  }\n\n  getJSON(resource) {\n    const headers = new Headers({\n      customdata: resource.headers && JSON.stringify(resource.headers)\n    });\n    const URL = `${resource.url}?${this._safeMap(resource.params, (item, key) => `${key}=${item}`).join('&')}`;\n    console.log(URL);\n    return fetch(URL, {\n      credentials: 'include',\n      headers\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  } // 报错时返回全部data\n\n\n  getJSON1(resource) {\n    const headers = new Headers({\n      customdata: resource.headers && JSON.stringify(resource.headers)\n    });\n    const URL = `${resource.url}?${this._safeMap(resource.params, (item, key) => `${key}=${item}`).join('&')}`;\n    return fetch(URL, {\n      credentials: 'include',\n      headers\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError1);\n  }\n\n  _handleError1(response) {\n    let resData = response;\n\n    if (Object.prototype.toString.call(resData) === '[object String]') {\n      resData = JSON.parse(response);\n    }\n\n    return resData;\n  }\n\n  delete(resource) {\n    const URL = `${resource.url}${queryParams(resource.params)}`;\n    return fetch(URL, {\n      method: 'delete',\n      credentials: 'include'\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n  get(resource) {\n    const URL = `${resource.url}/${resource.params[Object.keys(resource.params)[0]]}`;\n    return fetch(URL, {\n      credentials: 'include'\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n  postJSON(resource) {\n    return fetch(resource.url, {\n      method: 'post',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resource.params)\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n  postFile(resource) {\n    return fetch(resource.url, {\n      method: 'post',\n      ContentType: false,\n      mimeType: 'multipart/form-data',\n      body: resource.params\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n  putJSON(resource) {\n    return fetch(resource.url, {\n      method: 'put',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resource.params)\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n  patchJSON(resource) {\n    return fetch(resource.url, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(resource.params)\n    }).then(this._checkHttpStatus).then(this._parseJSON).then(this._handleError);\n  }\n\n}\n\nexport default new Fetch();","map":{"version":3,"sources":["/Users/lifangdi/workspace/travel_together_webapp/client/src/utils/fetch.js"],"names":["queryParams","Fetch","_safeMap","arr","iterator","Array","isArray","map","Object","keys","key","_parseJSON","response","headers","get","indexOf","text","json","_checkHttpStatus","status","error","Error","statusText","_handleError","resData","prototype","toString","call","JSON","parse","errno","window","location","reload","code","errmsg","message","data","getJSON","resource","Headers","customdata","stringify","URL","url","params","item","join","console","log","fetch","credentials","then","getJSON1","_handleError1","delete","method","postJSON","Accept","body","postFile","ContentType","mimeType","putJSON","patchJSON"],"mappings":"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","sourcesContent":["import 'whatwg-fetch';\nimport 'fetch-detector';\nimport 'fetch-ie8';\nimport { queryParams } from './utils';\n\nclass Fetch {\n  _safeMap(arr, iterator) {\n    if (Array.isArray(arr)) {\n      return arr.map(iterator);\n    } else if (typeof arr === 'object') {\n      return Object.keys(arr).map((key) => iterator(arr[key], key));\n    }\n\n    return [];\n  }\n\n  _parseJSON(response) {\n    if (response.headers.get('Content-Type').indexOf('text/plain') !== -1) {\n      return response.text();\n    }\n    return response.json();\n  }\n\n  _checkHttpStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n    const error = new Error(`调取服务发生错误:错误码:${response.status},错误信息:${response.statusText}`);\n    throw error;\n  }\n\n  _handleError(response) {\n    let resData = response;\n    if (Object.prototype.toString.call(resData) === '[object String]') {\n      resData = JSON.parse(response);\n    }\n    if (+resData.errno === 10022) {\n      // sso失败的错误码，重新登录\n      window.location.reload();\n    } else if (+resData.errno !== 0 && resData.code !== 0) {\n      // 接口异常错误\n      throw resData.errmsg || resData.message;\n    }\n    return resData.data;\n  }\n\n  getJSON(resource) {\n    const headers = new Headers({\n      customdata: resource.headers && JSON.stringify(resource.headers),\n    });\n    const URL = `${resource.url}?${this._safeMap(resource.params, (item, key) => `${key}=${item}`).join('&')}`;\n    console.log(URL)\n\n    return fetch(URL, { credentials: 'include', headers })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  // 报错时返回全部data\n  getJSON1(resource) {\n    const headers = new Headers({\n      customdata: resource.headers && JSON.stringify(resource.headers),\n    });\n    const URL = `${resource.url}?${this._safeMap(resource.params, (item, key) => `${key}=${item}`).join('&')}`;\n    return fetch(URL, { credentials: 'include', headers })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError1);\n  }\n\n  _handleError1(response) {\n    let resData = response;\n    if (Object.prototype.toString.call(resData) === '[object String]') {\n      resData = JSON.parse(response);\n    }\n\n    return resData;\n  }\n\n  delete(resource) {\n    const URL = `${resource.url}${queryParams(resource.params)}`;\n    return fetch(URL, {\n      method: 'delete',\n      credentials: 'include',\n    })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  get(resource) {\n    const URL = `${resource.url}/${resource.params[Object.keys(resource.params)[0]]}`;\n    return fetch(URL, { credentials: 'include' })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  postJSON(resource) {\n    return fetch(resource.url, {\n      method: 'post',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(resource.params),\n    })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  postFile(resource) {\n    return fetch(resource.url, {\n      method: 'post',\n      ContentType: false,\n      mimeType: 'multipart/form-data',\n      body: resource.params,\n    })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  putJSON(resource) {\n    return fetch(resource.url, {\n      method: 'put',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(resource.params),\n    })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n\n  patchJSON(resource) {\n    return fetch(resource.url, {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(resource.params),\n    })\n      .then(this._checkHttpStatus)\n      .then(this._parseJSON)\n      .then(this._handleError);\n  }\n}\n\nexport default new Fetch();\n"]},"metadata":{},"sourceType":"module"}